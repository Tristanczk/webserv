#include "../includes/webserv.hpp"

std::map<StatusCode, std::string> STATUS_MESSAGES;
std::map<std::string, std::string> MIME_TYPES;

void initStatusMessageMap() {
	STATUS_MESSAGES[INFORMATIONAL_CONTINUE] = "Continue";
	STATUS_MESSAGES[INFORMATIONAL_SWITCHING_PROTOCOLS] = "Switching Protocols";
	STATUS_MESSAGES[INFORMATIONAL_PROCESSING] = "Processing";
	STATUS_MESSAGES[INFORMATIONAL_EARLY_HINTS] = "Early Hints";
	STATUS_MESSAGES[SUCCESS_OK] = "OK";
	STATUS_MESSAGES[SUCCESS_CREATED] = "Created";
	STATUS_MESSAGES[SUCCESS_ACCEPTED] = "Accepted";
	STATUS_MESSAGES[SUCCESS_NON_AUTHORITATIVE_INFORMATION] = "Non-Authoritative Information";
	STATUS_MESSAGES[SUCCESS_NO_CONTENT] = "No Content";
	STATUS_MESSAGES[SUCCESS_RESET_CONTENT] = "Reset Content";
	STATUS_MESSAGES[SUCCESS_PARTIAL_CONTENT] = "Partial Content";
	STATUS_MESSAGES[SUCCESS_MULTI_STATUS] = "Multi-Status";
	STATUS_MESSAGES[SUCCESS_ALREADY_REPORTED] = "Already Reported";
	STATUS_MESSAGES[SUCCESS_IM_USED] = "IM Used";
	STATUS_MESSAGES[REDIRECTION_MULTIPLE_CHOICES] = "Multiple Choices";
	STATUS_MESSAGES[REDIRECTION_MOVED_PERMANENTLY] = "Moved Permanently";
	STATUS_MESSAGES[REDIRECTION_FOUND] = "Found";
	STATUS_MESSAGES[REDIRECTION_SEE_OTHER] = "See Other";
	STATUS_MESSAGES[REDIRECTION_NOT_MODIFIED] = "Not Modified";
	STATUS_MESSAGES[REDIRECTION_USE_PROXY] = "Use Proxy";
	STATUS_MESSAGES[REDIRECTION_TEMPORARY_REDIRECT] = "Temporary Redirect";
	STATUS_MESSAGES[REDIRECTION_PERMANENT_REDIRECT] = "Permanent Redirect";
	STATUS_MESSAGES[CLIENT_BAD_REQUEST] = "Bad Request";
	STATUS_MESSAGES[CLIENT_UNAUTHORIZED] = "Unauthorized";
	STATUS_MESSAGES[CLIENT_PAYMENT_REQUIRED] = "Payment Required";
	STATUS_MESSAGES[CLIENT_FORBIDDEN] = "Forbidden";
	STATUS_MESSAGES[CLIENT_NOT_FOUND] = "Not Found";
	STATUS_MESSAGES[CLIENT_METHOD_NOT_ALLOWED] = "Method Not Allowed";
	STATUS_MESSAGES[CLIENT_NOT_ACCEPTABLE] = "Not Acceptable";
	STATUS_MESSAGES[CLIENT_PROXY_AUTHENTICATION_REQUIRED] = "Proxy Authentication Required";
	STATUS_MESSAGES[CLIENT_REQUEST_TIMEOUT] = "Request Timeout";
	STATUS_MESSAGES[CLIENT_CONFLICT] = "Conflict";
	STATUS_MESSAGES[CLIENT_GONE] = "Gone";
	STATUS_MESSAGES[CLIENT_LENGTH_REQUIRED] = "Length Required";
	STATUS_MESSAGES[CLIENT_PRECONDITION_FAILED] = "Precondition Failed";
	STATUS_MESSAGES[CLIENT_PAYLOAD_TOO_LARGE] = "Payload Too Large";
	STATUS_MESSAGES[CLIENT_URI_TOO_LONG] = "URI Too Long";
	STATUS_MESSAGES[CLIENT_UNSUPPORTED_MEDIA_TYPE] = "Unsupported Media Type";
	STATUS_MESSAGES[CLIENT_RANGE_NOT_SATISFIABLE] = "Range Not Satisfiable";
	STATUS_MESSAGES[CLIENT_EXPECTATION_FAILED] = "Expectation Failed";
	STATUS_MESSAGES[CLIENT_IM_A_TEAPOT] = "I'm a teapot";
	STATUS_MESSAGES[CLIENT_MISDIRECTED_REQUEST] = "Misdirected Request";
	STATUS_MESSAGES[CLIENT_UNPROCESSABLE_ENTITY] = "Unprocessable Entity";
	STATUS_MESSAGES[CLIENT_LOCKED] = "Locked";
	STATUS_MESSAGES[CLIENT_FAILED_DEPENDENCY] = "Failed Dependency";
	STATUS_MESSAGES[CLIENT_TOO_EARLY] = "Too Early";
	STATUS_MESSAGES[CLIENT_UPGRADE_REQUIRED] = "Upgrade Required";
	STATUS_MESSAGES[CLIENT_PRECONDITION_REQUIRED] = "Precondition Required";
	STATUS_MESSAGES[CLIENT_TOO_MANY_REQUESTS] = "Too Many Requests";
	STATUS_MESSAGES[CLIENT_REQUEST_HEADER_FIELDS_TOO_LARGE] = "Request Header Fields Too Large";
	STATUS_MESSAGES[CLIENT_UNAVAILABLE_FOR_LEGAL_REASONS] = "Unavailable For Legal Reasons";
	STATUS_MESSAGES[SERVER_INTERNAL_SERVER_ERROR] = "Internal Server Error";
	STATUS_MESSAGES[SERVER_NOT_IMPLEMENTED] = "Not Implemented";
	STATUS_MESSAGES[SERVER_BAD_GATEWAY] = "Bad Gateway";
	STATUS_MESSAGES[SERVER_SERVICE_UNAVAILABLE] = "Service Unavailable";
	STATUS_MESSAGES[SERVER_GATEWAY_TIMEOUT] = "Gateway Timeout";
	STATUS_MESSAGES[SERVER_HTTP_VERSION_NOT_SUPPORTED] = "HTTP Version Not Supported";
	STATUS_MESSAGES[SERVER_VARIANT_ALSO_NEGOTIATES] = "Variant Also Negotiates";
	STATUS_MESSAGES[SERVER_INSUFFICIENT_STORAGE] = "Insufficient Storage";
	STATUS_MESSAGES[SERVER_LOOP_DETECTED] = "Loop Detected";
	STATUS_MESSAGES[SERVER_NOT_EXTENDED] = "Not Extended";
	STATUS_MESSAGES[SERVER_NETWORK_AUTHENTICATION_REQUIRED] = "Network Authentication Required";
}

void initMimeTypes() {
	MIME_TYPES["css"] = "text/css";
	MIME_TYPES["html"] = "text/html";
	MIME_TYPES["jpg"] = "image/jpeg";
	MIME_TYPES["js"] = "text/javascript";
	MIME_TYPES["mp4"] = "video/mp4";
	MIME_TYPES["png"] = "image/png";
	MIME_TYPES["svg"] = "image/svg+xml";

	std::ifstream ifs("/etc/mime.types");
	std::string line, mime, extension;
	while (true) {
		if (!std::getline(ifs, line))
			return;
		std::stringstream lineStream(line);
		if (line.empty() || line[0] == '#' || !(lineStream >> mime))
			continue;
		while (lineStream >> extension)
			MIME_TYPES[extension] = mime;
	}
}